/*
 * Цикл while
 */

/*
 * Цикл с предусловием — цикл, который выполняется пока истинно некоторое условие, указанное перед его началом. Это условие проверяется до выполнения тела цикла, поэтому тело может быть не выполнено ни разу, если условие с самого начала ложно.
 */

// while (condition) {
//    код, тело цикла (statement)
// }

/*
 * condition, то есть условие, вычисляется перед каждой итерацией цикла.
 * Если condition оценивается как true, оператор while выполняет statement.
 * Если condition оценивается как false, выполнение цикла прерывается и скрипт продолжает выполнять инструкции после цикла while.
 */

// let counter = 0;

// while (counter < 10) {
//   console.log('counter: ', counter);
//   counter += 1;
// }

/*
 * Будем заполнять места в отеле до тех пор пока текущее количество клиентов не будет равно максимально допустимому.
 */

// let clientCounter = 18;
// const maxClients = 25;

// while (clientCounter <= maxClients) {
//   console.log(clientCounter);
//   clientCounter += 1;
// }

/*
 *  Цикл do...while
 */

/*
 * Цикл с постусловием - цикл, в котором условие проверяется после выполнения тела цикла. Отсюда следует, что тело всегда выполняется хотя бы один раз.
 * В отличие от цикла while, цикл do...while всегда выполняет statement как минимум один раз, прежде чем он оценит condition.
 * Внутри цикла нужно внести изменения в некоторую переменную, чтобы убедиться, что выражение равно false после итераций. В противном случае будет бесконечный цикл.
 */

// let password = '';

// do {
//   password = prompt('Введите пароль длинее 4-х символлов', '');
// } while (password.length < 5);

// console.log('Ввели пароль: ', password);

/*
 * Не используем эти циклы
 */
////////////////////////////////////////////////////////////////////

/*
 *  Цикл for
 */

// for (initialization; condition; post - expression) {
//    statements
// }

/*
 * Инициализация (initialization) - выполняется один раз перед началом цикла. Используется для создания переменной-счётчика и указания её начального значения.
 * Условие (condition) - выражение, оцениваемое перед каждой итерацией (повторением) цикла. Тело цикла выполняется только тогда, когда выражение приводится к true. Цикл завершается, если значение будет false.
 * Тело (statements) - набор инструкций для выполнения на каждом повторении. Выполняется если выражение условия приводится к true.
 * Пост-выражение (post-expression) - выполняется в конце каждого повторения цикла, перед проверкой условия. Используется для обновления переменной-счётчика.
 * Переменные-счетчики, по традиции, называются буквами i, j и k.
 */
for (let i = 0; i <= 20; i += 5) {
  //   console.log(i);
}

/*
 * В примере объявляется перемнная-счетчик i, инициализируется значением 0 и цикл выполняется до тех пор, пока i <= 20, то есть условие приводится к true. После каждой итерации счётчик увеличивается на 5.
 */

/*
 * Посчитаем сумму чисел до определенного значения.
 */

const target = 3;
let sum = 0;

for (let i = 0; i <= target; i += 1) {
  sum += i;
}

// console.log(sum)

/*
 * Вспомним про операцию a % b и выведем остаток от деления используя цикл.
 */

// const max = 10;
// for (let i = 1; i < max; i += 1) {
//      console.log(`${max} % ${i} = `, max % i);
// }

for (let i = 0; i <= 5; i += 1) {
  //   console.log(i);
}

/*
 * Напиши скрипт который подсчитывает общую сумму зарплат работников.
 * - Кол-во работников хранится в перемнной employees.
 * - Зарплата каждого работника это случайное число от 500 до 5000
 * - Записать сумму в переменную totalSalary и вывести в консоль
 */

// 1 сделать вары
const minSalary = 500;
const maxSalary = 5000;
const employees = 14;
let totalSalary = 0;
// 2 перебрать работников в цикл
for (let i = 1; i <= employees; i += 1) {
  // 3 сгенерить случайную зп
  const salary = Math.round(
    Math.random() * (maxSalary - minSalary) + minSalary,
  );
  //   console.log(`ЗП работника номер ${i} - ${salary}`);

  // 4  прибавить к тоталу
  totalSalary += salary;
}
// 5 лог
// console.log('totalSalary: ', totalSalary);

/*
 * Напиши скрипт который подсчитывает сумму всех чётных чисел,
 * которые входят диапазон чисел в переменных от min до max.
 * Например, если min=0 и max=5, то диапазон 0-5, и в нём два чётных числа - 2 и 4, их сумма 6.
 */

//  1 вары
const min = 0;
const max = 5;
let total = 0;

// фор от min до max с шагом в 1
for (let i = 0; i <= max; i += 1) {
  //   console.log(i);
  // проверяем остаток от деления
  if (i % 2 !== 0) {
    // console.log('Не чётное: ', i);
    continue;
  }
  // пишем в сумму
  // console.log('чётное: ', i);
  total += i;
}

// аналог +=
// total = total + i;
// log
// console.log('total', total);
////////////////////////////////////////////////////////////////////
/*
 * Pre-increment и Post-increment
 */

// for (let i = 0; i < 10; i++) {
//   console.log(i);
// }

// let a = 10;
// const b = ++a;

// console.log(a);
// console.log(b);

////////////////////////////////////////////////////////////////////
/*
 * Оператор break
 */

/*
 * Найдём число 3. Как только выполнится условие if, цикл прекратит своё выполнение (будет прерван).
 */

for (let i = 0; i <= 5; i += 1) {
  //   console.log(i);

  if (i === 3) {
    // console.log('Нашли число 3, прерываем выполнение цикла');
    break;
  }
}

// console.log('Лог после цикла');

////////////////////////////////////////////////////////////////////
/*
 * Оператор continue
 */

/*
 * Прерывает не весь цикл, а только выполнение текущей итерации. Его используют, если понятно, что на текущей итерации цикла делать больше нечего или вообще ничего делать не нужно и пора переходить на следующую итерацию.
 */

/*
 * Используем цикл для вывода только нечетных чисел. Для чётных i срабатывает continue, выполнение тела прекращается и управление передаётся на следующую итерацию.
 */

const number = 10;

for (let i = 0; i < number; i += 1) {
  if (i % 2 === 0) {
    continue;
  }

  //   console.log('Нечетное i: ', i); // 1, 3, 5, 7, 9
}
